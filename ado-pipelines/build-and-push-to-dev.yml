parameters:
- name: dockerFile
  displayName: dockerFile - the path to the Dockerfile (from the root of the project repo)
  type: string
- name: imageRepository
  displayName: imageRepository - the image repository you want to create (example. bd/pothenesxes)
  type: string
- name: devContainerRegistry
  displayName: devContainerRegistry - the container registry to push the image in dev
  type: string
- name: devServiceConnection
  displayName: devServiceConnection - the name of the service connection used in dev
  type: string
- name: versionUpgrade
  displayName: versionUpgrade - the version to be upgraded ( major/minor/patch )
  type: string
  default: 'patch'
  values:
  - major
  - minor
  - patch 

trigger: none

jobs:
- job: buildAndPushImage
  displayName: BUILD AND PUSH IMAGE
  workspace:
    clean: all
  pool:
    vmImage: 'ubuntu-latest'
  steps:
    - checkout: self
      clean: true
    - checkout: git://${{ parameters.project }}/${{ parameters.repo }}
    - checkout: git://DevOps_Private/DevOpsPipelineHelper

    - task: NuGetAuthenticate@1
      displayName: NuGet authenticate

    - task: MavenAuthenticate@0
      displayName: Maven authenticate
    
    - task: Bash@3
      inputs:
        targetType: 'inline'
        script: |
          cd $(Build.SourcesDirectory)/${{ parameters.repo }}
          git checkout ${{ parameters.branch }}
          ls -al

    - task: AzureCLI@2
      name: getImageRepositoryTags
      displayName: GET IMAGE REPOSITORY TAGS FROM DEV REGISTRY
      inputs:
        azureSubscription: ${{ parameters.devServiceConnection }}
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          devContainerRegistry="${{ parameters.devContainerRegistry }}"
          imageRepository="${{ parameters.imageRepository }}"
          versionUpgrade="${{ parameters.versionUpgrade }}"

          # Check for existing tags in ACR 
          echo "Checking for existing tags in ACR..."

          az acr login --name $devContainerRegistry --subscription nbg-IDP-DevEnvMultiple-dev-01
          existingTags=$(az acr repository show-tags --name $devContainerRegistry --repository $imageRepository --output tsv)

          # Filter tags by format
          valid_tags=()
          for tag in $existingTags; do
            if [[ $tag =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
              echo "Valid tag found: $tag"
              valid_tags+=($tag)
            fi
          done
          
          if [ ${#valid_tags[@]} -eq 0 ]; then
            # No valid tags found, default to 1.0.0
            newTag="1.0.0"
            echo "No valid tags in major.minor.patch format found. Defaulting to $newTag"
          else
            # Sort valid tags and find the latest version
            latestTag=$(printf "%s\n" "${valid_tags[@]}" | sort -V | tail -n 1)
            latestMajor=$(echo $latestTag | cut -d '.' -f 1)
            latestMinor=$(echo $latestTag | cut -d '.' -f 2)
            latestPatch=$(echo $latestTag | cut -d '.' -f 3)

            # Increment version based on the selected upgrade type
            if [ "$versionUpgrade" == "major" ]; then
              newMajor=$((latestMajor + 1))
              newMinor=0
              newPatch=0
            elif [ "versionUpgrade" == "minor" ]; then
              newMajor=$latestMajor
              newMinor=$((latestMinor + 1))
              newPatch=0
            else
              newMajor=$latestMajor
              newMinor=$latestMinor
              newPatch=$((latestPatch + 1))
            fi

            newTag="${newMajor}.${newMinor}.${newPatch}"
            echo "Incremented tag based on latest valid version: $newTag"
          fi

          echo "New tag: $newTag"
          
          echo "##vso[task.setvariable variable=imageRepository]$imageRepository"
          echo "##vso[task.setvariable variable=newTag;isoutput=true]$newTag"

    - task: Docker@2
      name: buildDockerImage
      displayName: BUILD DOCKER IMAGE WITH TAGS
      inputs:
        command: build
        dockerfile: ${{ parameters.repo }}/${{ parameters.dockerFile }}
        repository: $(imageRepository)
        arguments: '--build-arg PAT=$(System.AccessToken)'
        tags: |
          $(getImageRepositoryTags.newTag)
          latest
        buildContext: $(Build.SourcesDirectory)/${{ parameters.repo }}

    - task: AzureCLI@2
      name: pushImageToDevAcr
      displayName: PUSH IMAGE TO DEV ACR
      inputs:
        azureSubscription: ${{ parameters.devServiceConnection }}
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          devContainerRegistry="${{ parameters.devContainerRegistry }}"

          docker image ls
          az acr login --name $devContainerRegistry --subscription nbg-IDP-DevEnvMultiple-dev-01
          docker tag $(imageRepository):$(getImageRepositoryTags.newTag) $devContainerRegistry.azurecr.io/$(imageRepository):$(getImageRepositoryTags.newTag)
          docker tag $(imageRepository):latest $devContainerRegistry.azurecr.io/$(imageRepository):latest
          docker image ls
          docker push $devContainerRegistry.azurecr.io/$(imageRepository):$(getImageRepositoryTags.newTag)
          docker push $devContainerRegistry.azurecr.io/$(imageRepository):latest

          echo "New tag: $(getImageRepositoryTags.newTag)"